/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Shopping List API
 * Endpoints for interacting with the shopping list application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
  CategoryIn,
  CategoryOut,
  NinjaCrudViewsListViewCategoryListParams,
  PagedCategoryOut,
} from "../model";
import { customInstance } from "../mutator/custom-instance";
import type { ErrorType } from "../mutator/custom-instance";

/**
 * @summary Category List
 */
export const ninjaCrudViewsListViewCategoryList = (
  params?: NinjaCrudViewsListViewCategoryListParams,
  signal?: AbortSignal
) => {
  return customInstance<PagedCategoryOut>({
    url: `/api/category/`,
    method: "GET",
    params,
    signal,
  });
};

export const getNinjaCrudViewsListViewCategoryListQueryKey = (
  params?: NinjaCrudViewsListViewCategoryListParams
) => {
  return [`/api/category/`, ...(params ? [params] : [])] as const;
};

export const getNinjaCrudViewsListViewCategoryListQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewCategoryListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsListViewCategoryListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>> = ({
    signal,
  }) => ninjaCrudViewsListViewCategoryList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsListViewCategoryListQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>
>;
export type NinjaCrudViewsListViewCategoryListQueryError = ErrorType<unknown>;

/**
 * @summary Category List
 */

export function useNinjaCrudViewsListViewCategoryList<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewCategoryListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewCategoryListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getNinjaCrudViewsListViewCategoryListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewCategoryListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsListViewCategoryListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>> = ({
    signal,
  }) => ninjaCrudViewsListViewCategoryList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsListViewCategoryListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>
>;
export type NinjaCrudViewsListViewCategoryListSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Category List
 */

export function useNinjaCrudViewsListViewCategoryListSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewCategoryListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewCategoryList>>,
      TError,
      TData
    >;
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewCategoryListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Category Create
 */
export const ninjaCrudViewsCreateViewCategoryCreate = (categoryIn: CategoryIn) => {
  return customInstance<CategoryOut>({
    url: `/api/category/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: categoryIn,
  });
};

export const getNinjaCrudViewsCreateViewCategoryCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>,
    TError,
    { data: CategoryIn },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>,
  TError,
  { data: CategoryIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>,
    { data: CategoryIn }
  > = (props) => {
    const { data } = props ?? {};

    return ninjaCrudViewsCreateViewCategoryCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsCreateViewCategoryCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>
>;
export type NinjaCrudViewsCreateViewCategoryCreateMutationBody = CategoryIn;
export type NinjaCrudViewsCreateViewCategoryCreateMutationError = ErrorType<unknown>;

/**
 * @summary Category Create
 */
export const useNinjaCrudViewsCreateViewCategoryCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>,
    TError,
    { data: CategoryIn },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewCategoryCreate>>,
  TError,
  { data: CategoryIn },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsCreateViewCategoryCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Category Read
 */
export const ninjaCrudViewsReadViewCategoryRead = (
  id?: string | null | undefined | null,
  signal?: AbortSignal
) => {
  return customInstance<CategoryOut>({
    url: `/api/category/${id}`,
    method: "GET",
    signal,
  });
};

export const getNinjaCrudViewsReadViewCategoryReadQueryKey = (id?: string | null | undefined | null) => {
  return [`/api/category/${id}`] as const;
};

export const getNinjaCrudViewsReadViewCategoryReadQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>, TError, TData>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsReadViewCategoryReadQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>> = ({
    signal,
  }) => ninjaCrudViewsReadViewCategoryRead(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type NinjaCrudViewsReadViewCategoryReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>
>;
export type NinjaCrudViewsReadViewCategoryReadQueryError = ErrorType<unknown>;

/**
 * @summary Category Read
 */

export function useNinjaCrudViewsReadViewCategoryRead<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewCategoryReadQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getNinjaCrudViewsReadViewCategoryReadSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsReadViewCategoryReadQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>> = ({
    signal,
  }) => ninjaCrudViewsReadViewCategoryRead(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsReadViewCategoryReadSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>
>;
export type NinjaCrudViewsReadViewCategoryReadSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Category Read
 */

export function useNinjaCrudViewsReadViewCategoryReadSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewCategoryRead>>,
      TError,
      TData
    >;
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewCategoryReadSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Category Update
 */
export const ninjaCrudViewsUpdateViewCategoryUpdate = (
  categoryIn: CategoryIn,
  id?: string | null | undefined | null
) => {
  return customInstance<CategoryOut>({
    url: `/api/category/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: categoryIn,
  });
};

export const getNinjaCrudViewsUpdateViewCategoryUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>,
    TError,
    { data: CategoryIn; id?: string | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>,
  TError,
  { data: CategoryIn; id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>,
    { data: CategoryIn; id?: string | null }
  > = (props) => {
    const { data, id } = props ?? {};

    return ninjaCrudViewsUpdateViewCategoryUpdate(data, id);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsUpdateViewCategoryUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>
>;
export type NinjaCrudViewsUpdateViewCategoryUpdateMutationBody = CategoryIn;
export type NinjaCrudViewsUpdateViewCategoryUpdateMutationError = ErrorType<unknown>;

/**
 * @summary Category Update
 */
export const useNinjaCrudViewsUpdateViewCategoryUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>,
    TError,
    { data: CategoryIn; id?: string | null },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewCategoryUpdate>>,
  TError,
  { data: CategoryIn; id?: string | null },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsUpdateViewCategoryUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Category Delete
 */
export const ninjaCrudViewsDeleteViewCategoryDelete = (id?: string | null | undefined | null) => {
  return customInstance<void>({ url: `/api/category/${id}`, method: "DELETE" });
};

export const getNinjaCrudViewsDeleteViewCategoryDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>,
    TError,
    { id?: string | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>,
    { id?: string | null }
  > = (props) => {
    const { id } = props ?? {};

    return ninjaCrudViewsDeleteViewCategoryDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsDeleteViewCategoryDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>
>;

export type NinjaCrudViewsDeleteViewCategoryDeleteMutationError = ErrorType<unknown>;

/**
 * @summary Category Delete
 */
export const useNinjaCrudViewsDeleteViewCategoryDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>,
    TError,
    { id?: string | null },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewCategoryDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsDeleteViewCategoryDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Shopping List API
 * Endpoints for interacting with the shopping list application
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'


/**
 * @summary Shopping List Group List
 */
export const ninjaCrudViewsListViewShoppingListGroupListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewShoppingListGroupListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewShoppingListGroupListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewShoppingListGroupListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary Shopping List Group Create
 */
export const ninjaCrudViewsCreateViewShoppingListGroupCreateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
})


/**
 * @summary Shopping List Group Read
 */
export const ninjaCrudViewsReadViewShoppingListGroupReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewShoppingListGroupReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Shopping List Group Update
 */
export const ninjaCrudViewsUpdateViewShoppingListGroupUpdateParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewShoppingListGroupUpdateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
})

export const ninjaCrudViewsUpdateViewShoppingListGroupUpdateResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Shopping List Group Delete
 */
export const ninjaCrudViewsDeleteViewShoppingListGroupDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Shopping List List
 */
export const ninjaCrudViewsListViewShoppingListListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewShoppingListListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewShoppingListListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewShoppingListListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary Shopping List Create
 */
export const ninjaCrudViewsCreateViewShoppingListCreateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "list_group_id": zod.string().uuid()
})


/**
 * @summary Shopping List Read
 */
export const ninjaCrudViewsReadViewShoppingListReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewShoppingListReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Shopping List Update
 */
export const ninjaCrudViewsUpdateViewShoppingListUpdateParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewShoppingListUpdateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "list_group_id": zod.string().uuid()
})

export const ninjaCrudViewsUpdateViewShoppingListUpdateResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Shopping List Delete
 */
export const ninjaCrudViewsDeleteViewShoppingListDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Category List
 */
export const ninjaCrudViewsListViewCategoryListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewCategoryListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewCategoryListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewCategoryListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "shopping_list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary Category Create
 */
export const ninjaCrudViewsCreateViewCategoryCreateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "shopping_list_group_id": zod.string().uuid()
})


/**
 * @summary Category Read
 */
export const ninjaCrudViewsReadViewCategoryReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewCategoryReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "shopping_list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Category Update
 */
export const ninjaCrudViewsUpdateViewCategoryUpdateParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewCategoryUpdateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "shopping_list_group_id": zod.string().uuid()
})

export const ninjaCrudViewsUpdateViewCategoryUpdateResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "shopping_list_group": zod.string().uuid(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Category Delete
 */
export const ninjaCrudViewsDeleteViewCategoryDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Uom List
 */
export const ninjaCrudViewsListViewUomListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewUomListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewUomListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewUomListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary Uom Create
 */
export const ninjaCrudViewsCreateViewUomCreateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string().or(zod.null()).optional()
})


/**
 * @summary Uom Read
 */
export const ninjaCrudViewsReadViewUomReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewUomReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Uom Update
 */
export const ninjaCrudViewsUpdateViewUomUpdateParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewUomUpdateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewUomUpdateResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Uom Delete
 */
export const ninjaCrudViewsDeleteViewUomDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Item List
 */
export const ninjaCrudViewsListViewItemListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewItemListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewItemListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewItemListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string(),
  "list_group": zod.string().uuid(),
  "photo": zod.string().or(zod.null()).optional(),
  "default_quantity": zod.number().optional(),
  "unit_of_measure": zod.string().uuid(),
  "category": zod.string().uuid(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary Create Item
 */
export const apiViewsItemCreateItemResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string(),
  "list_group": zod.string().uuid(),
  "photo": zod.string().or(zod.null()).optional(),
  "default_quantity": zod.number().optional(),
  "unit_of_measure": zod.string().uuid(),
  "category": zod.string().uuid(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Item Read
 */
export const ninjaCrudViewsReadViewItemReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewItemReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string(),
  "plural_name": zod.string(),
  "list_group": zod.string().uuid(),
  "photo": zod.string().or(zod.null()).optional(),
  "default_quantity": zod.number().optional(),
  "unit_of_measure": zod.string().uuid(),
  "category": zod.string().uuid(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Item Delete
 */
export const ninjaCrudViewsDeleteViewItemDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Get Shopping List Group List
 */
export const apiViewsListFunctionsGetShoppingListGroupListParams = zod.object({
  "id": zod.string().uuid()
})

export const apiViewsListFunctionsGetShoppingListGroupListResponse = zod.object({
  "lists": zod.array(zod.object({
  "shopping_list_group": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "lists": zod.array(zod.object({
  "shopping_list": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "categories": zod.array(zod.object({
  "category": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "active": zod.boolean(),
  "completed": zod.boolean(),
  "quantity": zod.number(),
  "item": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "plural_name": zod.string(),
  "unit_of_measure": zod.string()
})
}))
}))
}))
}))
})


/**
 * @summary Add Item
 */
export const apiViewsListFunctionsAddItemResponse = zod.object({
  "lists": zod.array(zod.object({
  "shopping_list_group": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "lists": zod.array(zod.object({
  "shopping_list": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "categories": zod.array(zod.object({
  "category": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "name": zod.string()
}),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "active": zod.boolean(),
  "completed": zod.boolean(),
  "quantity": zod.number(),
  "item": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "plural_name": zod.string(),
  "unit_of_measure": zod.string()
})
}))
}))
}))
}))
})


/**
 * @summary Update Item
 */
export const apiViewsListFunctionsUpdateItemParams = zod.object({
  "id": zod.string().uuid()
})

export const apiViewsListFunctionsUpdateItemResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list_group": zod.string().uuid(),
  "item": zod.string().uuid(),
  "quantity": zod.number().optional(),
  "active": zod.boolean(),
  "completed": zod.boolean(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Delete Item
 */
export const apiViewsListFunctionsDeleteItemParams = zod.object({
  "item_id": zod.string().uuid()
})


/**
 * @summary List Customization List
 */
export const ninjaCrudViewsListViewListCustomizationListQueryOffsetMin = 0;


export const ninjaCrudViewsListViewListCustomizationListQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewListCustomizationListQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewListCustomizationListResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list": zod.string().uuid(),
  "item": zod.string().uuid(),
  "stocked": zod.boolean().optional(),
  "category": zod.string().uuid().or(zod.null()).optional(),
  "Default Quantity": zod.number().or(zod.null()).optional(),
  "default_unit_of_measure": zod.string().uuid().or(zod.null()).optional(),
  "Purchase Count": zod.number().optional(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})),
  "count": zod.number()
})


/**
 * @summary List Customization Create
 */
export const ninjaCrudViewsCreateViewListCustomizationCreateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list_id": zod.string().uuid(),
  "item_id": zod.string().uuid(),
  "stocked": zod.boolean().optional(),
  "category_id": zod.string().uuid().or(zod.null()).optional(),
  "Default Quantity": zod.number().or(zod.null()).optional(),
  "default_unit_of_measure_id": zod.string().uuid().or(zod.null()).optional(),
  "Purchase Count": zod.number().optional(),
  "notes": zod.string().or(zod.null()).optional()
})


/**
 * @summary List Customization Read
 */
export const ninjaCrudViewsReadViewListCustomizationReadParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewListCustomizationReadResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list": zod.string().uuid(),
  "item": zod.string().uuid(),
  "stocked": zod.boolean().optional(),
  "category": zod.string().uuid().or(zod.null()).optional(),
  "Default Quantity": zod.number().or(zod.null()).optional(),
  "default_unit_of_measure": zod.string().uuid().or(zod.null()).optional(),
  "Purchase Count": zod.number().optional(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary List Customization Update
 */
export const ninjaCrudViewsUpdateViewListCustomizationUpdateParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewListCustomizationUpdateBody = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list_id": zod.string().uuid(),
  "item_id": zod.string().uuid(),
  "stocked": zod.boolean().optional(),
  "category_id": zod.string().uuid().or(zod.null()).optional(),
  "Default Quantity": zod.number().or(zod.null()).optional(),
  "default_unit_of_measure_id": zod.string().uuid().or(zod.null()).optional(),
  "Purchase Count": zod.number().optional(),
  "notes": zod.string().or(zod.null()).optional()
})

export const ninjaCrudViewsUpdateViewListCustomizationUpdateResponse = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "shopping_list": zod.string().uuid(),
  "item": zod.string().uuid(),
  "stocked": zod.boolean().optional(),
  "category": zod.string().uuid().or(zod.null()).optional(),
  "Default Quantity": zod.number().or(zod.null()).optional(),
  "default_unit_of_measure": zod.string().uuid().or(zod.null()).optional(),
  "Purchase Count": zod.number().optional(),
  "notes": zod.string().or(zod.null()).optional(),
  "created_at": zod.string().datetime().or(zod.null()).optional(),
  "created_by": zod.string().uuid().or(zod.null()).optional(),
  "updated_at": zod.string().datetime().or(zod.null()).optional(),
  "updated_by": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary List Customization Delete
 */
export const ninjaCrudViewsDeleteViewListCustomizationDeleteParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Create user
 */
export const apiViewsUserRegisterUserBody = zod.object({
  "email": zod.string(),
  "password": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})

export const apiViewsUserRegisterUserResponse = zod.object({
  "id": zod.string().uuid(),
  "email": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})


/**
 * @summary List Users
 */
export const ninjaCrudViewsListViewListUsersQueryOffsetMin = 0;


export const ninjaCrudViewsListViewListUsersQueryParams = zod.object({
  "limit": zod.number().min(1).optional(),
  "offset": zod.number().min(ninjaCrudViewsListViewListUsersQueryOffsetMin).optional()
})

export const ninjaCrudViewsListViewListUsersResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "email": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})),
  "count": zod.number()
})


/**
 * @summary New Token
 */
export const apiViewsUserNewTokenBodyPasswordMax = 128;
export const apiViewsUserNewTokenBodyEmailMax = 254;


export const apiViewsUserNewTokenBody = zod.object({
  "password": zod.string().max(apiViewsUserNewTokenBodyPasswordMax),
  "email": zod.string().max(apiViewsUserNewTokenBodyEmailMax)
})

export const apiViewsUserNewTokenResponseUserEmailMax = 254;
export const apiViewsUserNewTokenResponseUserFirstNameMax = 255;
export const apiViewsUserNewTokenResponseUserLastNameMax = 255;


export const apiViewsUserNewTokenResponse = zod.object({
  "access": zod.string(),
  "refresh": zod.string(),
  "user": zod.object({
  "id": zod.string().uuid().or(zod.null()).optional(),
  "email": zod.string().max(apiViewsUserNewTokenResponseUserEmailMax),
  "first_name": zod.string().max(apiViewsUserNewTokenResponseUserFirstNameMax),
  "last_name": zod.string().max(apiViewsUserNewTokenResponseUserLastNameMax)
})
})


/**
 * @summary Reg Enabled
 */
export const apiViewsUserRegEnabledResponse = zod.object({
  "enabled": zod.boolean()
})


/**
 * Get the current authenticated user.
 * @summary Get current user
 */
export const apiViewsUserGetCurrentUserResponse = zod.object({
  "id": zod.string().uuid(),
  "email": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})


/**
 * @summary Update current user
 */
export const apiViewsUserUpdateMeBody = zod.object({
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "first_name": zod.string().optional(),
  "last_name": zod.string().optional()
})

export const apiViewsUserUpdateMeResponse = zod.object({
  "id": zod.string().uuid(),
  "email": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})


/**
 * @summary Get User Details
 */
export const ninjaCrudViewsReadViewGetUserDetailsParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})

export const ninjaCrudViewsReadViewGetUserDetailsResponse = zod.object({
  "id": zod.string().uuid(),
  "email": zod.string(),
  "first_name": zod.string().or(zod.null()),
  "last_name": zod.string().or(zod.null())
})


/**
 * @summary Delete User
 */
export const ninjaCrudViewsDeleteViewDeleteUserParams = zod.object({
  "id": zod.string().uuid().or(zod.null()).optional()
})


/**
 * @summary Refresh Token
 */
export const apiViewsUserRefreshTokenBody = zod.object({
  "refresh": zod.string()
})

export const apiViewsUserRefreshTokenResponse = zod.object({
  "access": zod.string(),
  "refresh": zod.string()
})



/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Shopping List API
 * Endpoints for interacting with the shopping list application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
  NinjaCrudViewsListViewShoppingListGroupListParams,
  PagedShoppingListGroupOut,
  ShoppingListGroupIn,
  ShoppingListGroupOut,
} from "../model";
import { customInstance } from "../mutator/custom-instance";
import type { ErrorType } from "../mutator/custom-instance";

/**
 * @summary Shopping List Group List
 */
export const ninjaCrudViewsListViewShoppingListGroupList = (
  params?: NinjaCrudViewsListViewShoppingListGroupListParams,
  signal?: AbortSignal
) => {
  return customInstance<PagedShoppingListGroupOut>({
    url: `/api/shopping_list_group/`,
    method: "GET",
    params,
    signal,
  });
};

export const getNinjaCrudViewsListViewShoppingListGroupListQueryKey = (
  params?: NinjaCrudViewsListViewShoppingListGroupListParams
) => {
  return [`/api/shopping_list_group/`, ...(params ? [params] : [])] as const;
};

export const getNinjaCrudViewsListViewShoppingListGroupListQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListGroupListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsListViewShoppingListGroupListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>> = ({
    signal,
  }) => ninjaCrudViewsListViewShoppingListGroupList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsListViewShoppingListGroupListQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>
>;
export type NinjaCrudViewsListViewShoppingListGroupListQueryError = ErrorType<unknown>;

/**
 * @summary Shopping List Group List
 */

export function useNinjaCrudViewsListViewShoppingListGroupList<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListGroupListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewShoppingListGroupListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getNinjaCrudViewsListViewShoppingListGroupListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListGroupListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsListViewShoppingListGroupListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>> = ({
    signal,
  }) => ninjaCrudViewsListViewShoppingListGroupList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsListViewShoppingListGroupListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>
>;
export type NinjaCrudViewsListViewShoppingListGroupListSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Shopping List Group List
 */

export function useNinjaCrudViewsListViewShoppingListGroupListSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListGroupListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListGroupList>>,
      TError,
      TData
    >;
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewShoppingListGroupListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Shopping List Group Create
 */
export const ninjaCrudViewsCreateViewShoppingListGroupCreate = (shoppingListGroupIn: ShoppingListGroupIn) => {
  return customInstance<ShoppingListGroupOut>({
    url: `/api/shopping_list_group/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: shoppingListGroupIn,
  });
};

export const getNinjaCrudViewsCreateViewShoppingListGroupCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>,
    TError,
    { data: ShoppingListGroupIn },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>,
  TError,
  { data: ShoppingListGroupIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>,
    { data: ShoppingListGroupIn }
  > = (props) => {
    const { data } = props ?? {};

    return ninjaCrudViewsCreateViewShoppingListGroupCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsCreateViewShoppingListGroupCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>
>;
export type NinjaCrudViewsCreateViewShoppingListGroupCreateMutationBody = ShoppingListGroupIn;
export type NinjaCrudViewsCreateViewShoppingListGroupCreateMutationError = ErrorType<unknown>;

/**
 * @summary Shopping List Group Create
 */
export const useNinjaCrudViewsCreateViewShoppingListGroupCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>,
    TError,
    { data: ShoppingListGroupIn },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListGroupCreate>>,
  TError,
  { data: ShoppingListGroupIn },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsCreateViewShoppingListGroupCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Shopping List Group Read
 */
export const ninjaCrudViewsReadViewShoppingListGroupRead = (
  id?: string | null | undefined | null,
  signal?: AbortSignal
) => {
  return customInstance<ShoppingListGroupOut>({
    url: `/api/shopping_list_group/${id}`,
    method: "GET",
    signal,
  });
};

export const getNinjaCrudViewsReadViewShoppingListGroupReadQueryKey = (
  id?: string | null | undefined | null
) => {
  return [`/api/shopping_list_group/${id}`] as const;
};

export const getNinjaCrudViewsReadViewShoppingListGroupReadQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsReadViewShoppingListGroupReadQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>> = ({
    signal,
  }) => ninjaCrudViewsReadViewShoppingListGroupRead(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsReadViewShoppingListGroupReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>
>;
export type NinjaCrudViewsReadViewShoppingListGroupReadQueryError = ErrorType<unknown>;

/**
 * @summary Shopping List Group Read
 */

export function useNinjaCrudViewsReadViewShoppingListGroupRead<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewShoppingListGroupReadQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getNinjaCrudViewsReadViewShoppingListGroupReadSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNinjaCrudViewsReadViewShoppingListGroupReadQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>> = ({
    signal,
  }) => ninjaCrudViewsReadViewShoppingListGroupRead(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NinjaCrudViewsReadViewShoppingListGroupReadSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>
>;
export type NinjaCrudViewsReadViewShoppingListGroupReadSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Shopping List Group Read
 */

export function useNinjaCrudViewsReadViewShoppingListGroupReadSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListGroupRead>>,
      TError,
      TData
    >;
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewShoppingListGroupReadSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Shopping List Group Update
 */
export const ninjaCrudViewsUpdateViewShoppingListGroupUpdate = (
  shoppingListGroupIn: ShoppingListGroupIn,
  id?: string | null | undefined | null
) => {
  return customInstance<ShoppingListGroupOut>({
    url: `/api/shopping_list_group/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: shoppingListGroupIn,
  });
};

export const getNinjaCrudViewsUpdateViewShoppingListGroupUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>,
    TError,
    { data: ShoppingListGroupIn; id?: string | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>,
  TError,
  { data: ShoppingListGroupIn; id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>,
    { data: ShoppingListGroupIn; id?: string | null }
  > = (props) => {
    const { data, id } = props ?? {};

    return ninjaCrudViewsUpdateViewShoppingListGroupUpdate(data, id);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsUpdateViewShoppingListGroupUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>
>;
export type NinjaCrudViewsUpdateViewShoppingListGroupUpdateMutationBody = ShoppingListGroupIn;
export type NinjaCrudViewsUpdateViewShoppingListGroupUpdateMutationError = ErrorType<unknown>;

/**
 * @summary Shopping List Group Update
 */
export const useNinjaCrudViewsUpdateViewShoppingListGroupUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>,
    TError,
    { data: ShoppingListGroupIn; id?: string | null },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListGroupUpdate>>,
  TError,
  { data: ShoppingListGroupIn; id?: string | null },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsUpdateViewShoppingListGroupUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Shopping List Group Delete
 */
export const ninjaCrudViewsDeleteViewShoppingListGroupDelete = (id?: string | null | undefined | null) => {
  return customInstance<void>({
    url: `/api/shopping_list_group/${id}`,
    method: "DELETE",
  });
};

export const getNinjaCrudViewsDeleteViewShoppingListGroupDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>,
    TError,
    { id?: string | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>,
    { id?: string | null }
  > = (props) => {
    const { id } = props ?? {};

    return ninjaCrudViewsDeleteViewShoppingListGroupDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type NinjaCrudViewsDeleteViewShoppingListGroupDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>
>;

export type NinjaCrudViewsDeleteViewShoppingListGroupDeleteMutationError = ErrorType<unknown>;

/**
 * @summary Shopping List Group Delete
 */
export const useNinjaCrudViewsDeleteViewShoppingListGroupDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>,
    TError,
    { id?: string | null },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListGroupDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const mutationOptions = getNinjaCrudViewsDeleteViewShoppingListGroupDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

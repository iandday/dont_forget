/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Shopping List API
 * Endpoints for interacting with the shopping list application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  NinjaCrudViewsListViewShoppingListListParams,
  PagedShoppingListOut,
  ShoppingListIn,
  ShoppingListOut,
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

/**
 * @summary Shopping List List
 */
export const ninjaCrudViewsListViewShoppingListList = (
  params?: NinjaCrudViewsListViewShoppingListListParams,
  signal?: AbortSignal
) => {
  return customInstance<PagedShoppingListOut>({
    url: `/api/shopping_list/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getNinjaCrudViewsListViewShoppingListListQueryKey = (
  params?: NinjaCrudViewsListViewShoppingListListParams
) => {
  return [`/api/shopping_list/`, ...(params ? [params] : [])] as const
}

export const getNinjaCrudViewsListViewShoppingListListQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getNinjaCrudViewsListViewShoppingListListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>
  > = ({ signal }) => ninjaCrudViewsListViewShoppingListList(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsListViewShoppingListListQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>
>
export type NinjaCrudViewsListViewShoppingListListQueryError =
  ErrorType<unknown>

/**
 * @summary Shopping List List
 */

export function useNinjaCrudViewsListViewShoppingListList<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewShoppingListListQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getNinjaCrudViewsListViewShoppingListListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getNinjaCrudViewsListViewShoppingListListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>
  > = ({ signal }) => ninjaCrudViewsListViewShoppingListList(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsListViewShoppingListListSuspenseQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>
  >
export type NinjaCrudViewsListViewShoppingListListSuspenseQueryError =
  ErrorType<unknown>

/**
 * @summary Shopping List List
 */

export function useNinjaCrudViewsListViewShoppingListListSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewShoppingListListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewShoppingListList>>,
      TError,
      TData
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getNinjaCrudViewsListViewShoppingListListSuspenseQueryOptions(
      params,
      options
    )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Shopping List Create
 */
export const ninjaCrudViewsCreateViewShoppingListCreate = (
  shoppingListIn: ShoppingListIn
) => {
  return customInstance<ShoppingListOut>({
    url: `/api/shopping_list/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: shoppingListIn,
  })
}

export const getNinjaCrudViewsCreateViewShoppingListCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>,
    TError,
    { data: ShoppingListIn },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>,
  TError,
  { data: ShoppingListIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>,
    { data: ShoppingListIn }
  > = (props) => {
    const { data } = props ?? {}

    return ninjaCrudViewsCreateViewShoppingListCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsCreateViewShoppingListCreateMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>
  >
export type NinjaCrudViewsCreateViewShoppingListCreateMutationBody =
  ShoppingListIn
export type NinjaCrudViewsCreateViewShoppingListCreateMutationError =
  ErrorType<unknown>

/**
 * @summary Shopping List Create
 */
export const useNinjaCrudViewsCreateViewShoppingListCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>,
    TError,
    { data: ShoppingListIn },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewShoppingListCreate>>,
  TError,
  { data: ShoppingListIn },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsCreateViewShoppingListCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Shopping List Read
 */
export const ninjaCrudViewsReadViewShoppingListRead = (
  id?: string | null | undefined | null,
  signal?: AbortSignal
) => {
  return customInstance<ShoppingListOut>({
    url: `/api/shopping_list/${id}`,
    method: 'GET',
    signal,
  })
}

export const getNinjaCrudViewsReadViewShoppingListReadQueryKey = (
  id?: string | null | undefined | null
) => {
  return [`/api/shopping_list/${id}`] as const
}

export const getNinjaCrudViewsReadViewShoppingListReadQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getNinjaCrudViewsReadViewShoppingListReadQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>
  > = ({ signal }) => ninjaCrudViewsReadViewShoppingListRead(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsReadViewShoppingListReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>
>
export type NinjaCrudViewsReadViewShoppingListReadQueryError =
  ErrorType<unknown>

/**
 * @summary Shopping List Read
 */

export function useNinjaCrudViewsReadViewShoppingListRead<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewShoppingListReadQueryOptions(
    id,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getNinjaCrudViewsReadViewShoppingListReadSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getNinjaCrudViewsReadViewShoppingListReadQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>
  > = ({ signal }) => ninjaCrudViewsReadViewShoppingListRead(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsReadViewShoppingListReadSuspenseQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>
  >
export type NinjaCrudViewsReadViewShoppingListReadSuspenseQueryError =
  ErrorType<unknown>

/**
 * @summary Shopping List Read
 */

export function useNinjaCrudViewsReadViewShoppingListReadSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewShoppingListRead>>,
      TError,
      TData
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getNinjaCrudViewsReadViewShoppingListReadSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Shopping List Update
 */
export const ninjaCrudViewsUpdateViewShoppingListUpdate = (
  shoppingListIn: ShoppingListIn,
  id?: string | null | undefined | null
) => {
  return customInstance<ShoppingListOut>({
    url: `/api/shopping_list/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: shoppingListIn,
  })
}

export const getNinjaCrudViewsUpdateViewShoppingListUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>,
    TError,
    { data: ShoppingListIn; id?: string | null },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>,
  TError,
  { data: ShoppingListIn; id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>,
    { data: ShoppingListIn; id?: string | null }
  > = (props) => {
    const { data, id } = props ?? {}

    return ninjaCrudViewsUpdateViewShoppingListUpdate(data, id)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsUpdateViewShoppingListUpdateMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>
  >
export type NinjaCrudViewsUpdateViewShoppingListUpdateMutationBody =
  ShoppingListIn
export type NinjaCrudViewsUpdateViewShoppingListUpdateMutationError =
  ErrorType<unknown>

/**
 * @summary Shopping List Update
 */
export const useNinjaCrudViewsUpdateViewShoppingListUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>,
    TError,
    { data: ShoppingListIn; id?: string | null },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewShoppingListUpdate>>,
  TError,
  { data: ShoppingListIn; id?: string | null },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsUpdateViewShoppingListUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Shopping List Delete
 */
export const ninjaCrudViewsDeleteViewShoppingListDelete = (
  id?: string | null | undefined | null
) => {
  return customInstance<void>({
    url: `/api/shopping_list/${id}`,
    method: 'DELETE',
  })
}

export const getNinjaCrudViewsDeleteViewShoppingListDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>,
    TError,
    { id?: string | null },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>,
    { id?: string | null }
  > = (props) => {
    const { id } = props ?? {}

    return ninjaCrudViewsDeleteViewShoppingListDelete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsDeleteViewShoppingListDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>
  >

export type NinjaCrudViewsDeleteViewShoppingListDeleteMutationError =
  ErrorType<unknown>

/**
 * @summary Shopping List Delete
 */
export const useNinjaCrudViewsDeleteViewShoppingListDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>,
    TError,
    { id?: string | null },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewShoppingListDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsDeleteViewShoppingListDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}

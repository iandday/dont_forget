/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Shopping List API
 * Endpoints for interacting with the shopping list application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import type {
  NinjaCrudViewsListViewUomListParams,
  PagedUnitOfMeasureOut,
  UnitOfMeasureIn,
  UnitOfMeasureOut,
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

/**
 * @summary Uom List
 */
export const ninjaCrudViewsListViewUomList = (
  params?: NinjaCrudViewsListViewUomListParams,
  signal?: AbortSignal
) => {
  return customInstance<PagedUnitOfMeasureOut>({
    url: `/api/uom/`,
    method: 'GET',
    params,
    signal,
  })
}

export const getNinjaCrudViewsListViewUomListQueryKey = (
  params?: NinjaCrudViewsListViewUomListParams
) => {
  return [`/api/uom/`, ...(params ? [params] : [])] as const
}

export const getNinjaCrudViewsListViewUomListQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewUomListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getNinjaCrudViewsListViewUomListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>
  > = ({ signal }) => ninjaCrudViewsListViewUomList(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsListViewUomListQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>
>
export type NinjaCrudViewsListViewUomListQueryError = ErrorType<unknown>

/**
 * @summary Uom List
 */

export function useNinjaCrudViewsListViewUomList<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewUomListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewUomListQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getNinjaCrudViewsListViewUomListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewUomListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getNinjaCrudViewsListViewUomListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>
  > = ({ signal }) => ninjaCrudViewsListViewUomList(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsListViewUomListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>
>
export type NinjaCrudViewsListViewUomListSuspenseQueryError = ErrorType<unknown>

/**
 * @summary Uom List
 */

export function useNinjaCrudViewsListViewUomListSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
  TError = ErrorType<unknown>,
>(
  params?: NinjaCrudViewsListViewUomListParams,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsListViewUomList>>,
      TError,
      TData
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsListViewUomListSuspenseQueryOptions(
    params,
    options
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Uom Create
 */
export const ninjaCrudViewsCreateViewUomCreate = (
  unitOfMeasureIn: UnitOfMeasureIn
) => {
  return customInstance<UnitOfMeasureOut>({
    url: `/api/uom/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: unitOfMeasureIn,
  })
}

export const getNinjaCrudViewsCreateViewUomCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>,
    TError,
    { data: UnitOfMeasureIn },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>,
  TError,
  { data: UnitOfMeasureIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>,
    { data: UnitOfMeasureIn }
  > = (props) => {
    const { data } = props ?? {}

    return ninjaCrudViewsCreateViewUomCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsCreateViewUomCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>
>
export type NinjaCrudViewsCreateViewUomCreateMutationBody = UnitOfMeasureIn
export type NinjaCrudViewsCreateViewUomCreateMutationError = ErrorType<unknown>

/**
 * @summary Uom Create
 */
export const useNinjaCrudViewsCreateViewUomCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>,
    TError,
    { data: UnitOfMeasureIn },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsCreateViewUomCreate>>,
  TError,
  { data: UnitOfMeasureIn },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsCreateViewUomCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Uom Read
 */
export const ninjaCrudViewsReadViewUomRead = (
  id?: string | null | undefined | null,
  signal?: AbortSignal
) => {
  return customInstance<UnitOfMeasureOut>({
    url: `/api/uom/${id}`,
    method: 'GET',
    signal,
  })
}

export const getNinjaCrudViewsReadViewUomReadQueryKey = (
  id?: string | null | undefined | null
) => {
  return [`/api/uom/${id}`] as const
}

export const getNinjaCrudViewsReadViewUomReadQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getNinjaCrudViewsReadViewUomReadQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>
  > = ({ signal }) => ninjaCrudViewsReadViewUomRead(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsReadViewUomReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>
>
export type NinjaCrudViewsReadViewUomReadQueryError = ErrorType<unknown>

/**
 * @summary Uom Read
 */

export function useNinjaCrudViewsReadViewUomRead<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewUomReadQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getNinjaCrudViewsReadViewUomReadSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getNinjaCrudViewsReadViewUomReadQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>
  > = ({ signal }) => ninjaCrudViewsReadViewUomRead(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type NinjaCrudViewsReadViewUomReadSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>
>
export type NinjaCrudViewsReadViewUomReadSuspenseQueryError = ErrorType<unknown>

/**
 * @summary Uom Read
 */

export function useNinjaCrudViewsReadViewUomReadSuspense<
  TData = Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
  TError = ErrorType<unknown>,
>(
  id?: string | null | undefined | null,
  options?: {
    query?: UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof ninjaCrudViewsReadViewUomRead>>,
      TError,
      TData
    >
  }
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNinjaCrudViewsReadViewUomReadSuspenseQueryOptions(
    id,
    options
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Uom Update
 */
export const ninjaCrudViewsUpdateViewUomUpdate = (
  unitOfMeasureIn: UnitOfMeasureIn,
  id?: string | null | undefined | null
) => {
  return customInstance<UnitOfMeasureOut>({
    url: `/api/uom/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: unitOfMeasureIn,
  })
}

export const getNinjaCrudViewsUpdateViewUomUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>,
    TError,
    { data: UnitOfMeasureIn; id?: string | null },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>,
  TError,
  { data: UnitOfMeasureIn; id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>,
    { data: UnitOfMeasureIn; id?: string | null }
  > = (props) => {
    const { data, id } = props ?? {}

    return ninjaCrudViewsUpdateViewUomUpdate(data, id)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsUpdateViewUomUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>
>
export type NinjaCrudViewsUpdateViewUomUpdateMutationBody = UnitOfMeasureIn
export type NinjaCrudViewsUpdateViewUomUpdateMutationError = ErrorType<unknown>

/**
 * @summary Uom Update
 */
export const useNinjaCrudViewsUpdateViewUomUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>,
    TError,
    { data: UnitOfMeasureIn; id?: string | null },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsUpdateViewUomUpdate>>,
  TError,
  { data: UnitOfMeasureIn; id?: string | null },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsUpdateViewUomUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Uom Delete
 */
export const ninjaCrudViewsDeleteViewUomDelete = (
  id?: string | null | undefined | null
) => {
  return customInstance<void>({ url: `/api/uom/${id}`, method: 'DELETE' })
}

export const getNinjaCrudViewsDeleteViewUomDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>,
    TError,
    { id?: string | null },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>,
    { id?: string | null }
  > = (props) => {
    const { id } = props ?? {}

    return ninjaCrudViewsDeleteViewUomDelete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type NinjaCrudViewsDeleteViewUomDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>
>

export type NinjaCrudViewsDeleteViewUomDeleteMutationError = ErrorType<unknown>

/**
 * @summary Uom Delete
 */
export const useNinjaCrudViewsDeleteViewUomDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>,
    TError,
    { id?: string | null },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof ninjaCrudViewsDeleteViewUomDelete>>,
  TError,
  { id?: string | null },
  TContext
> => {
  const mutationOptions =
    getNinjaCrudViewsDeleteViewUomDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
